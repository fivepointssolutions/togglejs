var Toggle={DefaultEffect:'slide',DefaultEffectDuration:0.25,EffectPairs:{'slide':['SlideDown','SlideUp'],'blind':['BlindDown','BlindUp'],'appear':['Appear','Fade']},extractAnchor:function(url){var matches=String(url).match(/\#(.+)$/);if(matches)return matches[1];},extractToggleObjects:function(string){var matches=String(string).match(/^toggle\[(.+)\]$/);if(matches){var ids=matches[1].split(',');var elements=[];ids.each(function(id){elements.push($(id))});return elements;}else{return[];}},toggle:function(elements,effect,options){var elements=$A([elements]).flatten();var effect=(effect||Toggle.DefaultEffect).toLowerCase();var options=options||{};if(effect=='none'){if(options.beforeStart)options.beforeStart();elements.invoke("toggle");if(options.afterFinish)options.afterFinish();}else{options.duration=options.duration||Toggle.DefaultEffectDuration;var effects=elements.map(function(e){var element=$(e);var inOrOut=element.visible()?1:0;var name=Toggle.EffectPairs[effect][inOrOut];return new Effect[name](element,{sync:true});});new Effect.Parallel(effects,options);}},show:function(elements,effect,options){var elements=$([elements]).flatten();elements=elements.map(function(element){return $(element)});elements=elements.reject(function(element){return element.visible()});Toggle.toggle(elements,effect,options);},hide:function(elements,effect,options){var elements=$([elements]).flatten();elements=elements.map(function(element){return $(element)});elements=elements.reject(function(element){return!element.visible()});Toggle.toggle(elements,effect,options);},wrapElement:function(element){var element=$(element);var parent=$(element.parentNode);if(parent.hasClassName('toggle_wrapper')){return parent;}else{return element.wrap($div({'class':'toggle_wrapper','style':'display: none'}));}}};Toggle.LinkBehavior=Behavior.create({initialize:function(options){var options=options||{};var elements=Toggle.extractToggleObjects(this.element.readAttribute('rel'));this.toggleWrappers=elements.map(function(e){return Toggle.wrapElement(e)});this.invert=options.invert||false;if(this.invert){this.effect='none';this.toggle();}
this.effect=options.effect||Toggle.DefaultEffect;this.onLoad=options.onLoad||Prototype.emptyFunction;this.onLoad.bind(this);this.beforeToggle=options.beforeToggle||Prototype.emptyFunction;this.beforeToggle.bind(this);this.afterToggle=options.afterToggle||Prototype.emptyFunction;this.afterToggle.bind(this);this.toggleID=Toggle.extractAnchor(this.element.href);this.element.behavior=this;Toggle.addLink(this.toggleID,this.element);this.onLoad(this.element);},onclick:function(){this.toggle();return false;},toggle:function(){Toggle.toggle(this.toggleWrappers,this.effect,{beforeStart:function(){if(this.beforeToggle)this.beforeToggle(this.element)}.bind(this),afterFinish:function(){if(this.afterToggle)this.afterToggle(this.element)}.bind(this)});}});Toggle.links={};Toggle.addLink=function(id,element){this.links[id]=this.links[id]||$A();this.links[id].push(element);};Event.observe(window,'dom:loaded',function(){var anchor=Toggle.extractAnchor(window.location);var links=Toggle.links[anchor];if(links){var behavior=links.first().behavior;behavior.onclick();}});Toggle.CheckboxBehavior=Behavior.create({initialize:function(options){var options=options||{};this.invert=options.invert;var elements=Toggle.extractToggleObjects(this.element.readAttribute('rel'));this.toggleWrappers=elements.map(function(e){return Toggle.wrapElement(e)});this.effect='none';this.toggle();this.effect=options.effect||Toggle.DefaultEffect;},onclick:function(event){this.toggle();},toggle:function(){var method,formElementMethod;if(this.invert){method=this.element.checked?'hide':'show';formElementMethod=this.element.checked?'disable':'enable';}else{method=this.element.checked?'show':'hide';formElementMethod=this.element.checked?'enable':'disable';}
Toggle[method](this.toggleWrappers,this.effect);this.toggleWrappers.each(function(wrapper){Form.getElements(wrapper).invoke(formElementMethod);});}});Toggle.RadioGroupBehavior=Behavior.create({initialize:function(options){var options=options||{};this.radioButtons=this.element.select('input[type=radio]');this.toggleWrapperIDs=$A();this.toggleWrapperIDsFor={};this.radioButtons.each(function(radioButton){var elements=Toggle.extractToggleObjects(radioButton.readAttribute('rel'))
var ids=elements.invoke('identify');var wrapperIDs=elements.map(function(e){return Toggle.wrapElement(e)}).invoke('identify');this.toggleWrapperIDsFor[radioButton.identify()]=wrapperIDs;this.toggleWrapperIDs.push(wrapperIDs);radioButton.observe('click',this.onRadioButtonClick.bind(this));}.bind(this));this.toggleWrapperIDs=this.toggleWrapperIDs.flatten().uniq()
this.effect="none";this.toggle();this.effect=options.effect||Toggle.DefaultEffect;},onRadioButtonClick:function(event){this.toggle();},toggle:function(){var group=this.element;var radioButton=this.radioButtons.find(function(b){return b.checked});var wrapperIDs=this.toggleWrapperIDsFor[radioButton.identify()];var partitioned=this.toggleWrapperIDs.partition(function(id){return wrapperIDs.include(id)});Toggle.show(partitioned[0],this.effect);Toggle.hide(partitioned[1],this.effect);}});Toggle.SelectBehavior=Behavior.create({initialize:function(options){var options=options||{};var optionElements=this.element.select('option');this.toggleWrapperIDs=$A();this.toggleWrapperIDsFor={};optionElements.each(function(optionElement){var elements=Toggle.extractToggleObjects(optionElement.readAttribute('rel'))
var wrapperIDs=elements.map(function(e){return Toggle.wrapElement(e)}).invoke('identify');this.toggleWrapperIDsFor[optionElement.identify()]=wrapperIDs;this.toggleWrapperIDs.push(wrapperIDs);}.bind(this));this.toggleWrapperIDs=this.toggleWrapperIDs.flatten().uniq();this.effect="none";this.toggle();this.effect=options.effect||Toggle.DefaultEffect;},onchange:function(event){this.toggle();},toggle:function(){var combo=this.element;var option=$(combo.options[combo.selectedIndex]);var wrapperIDs=this.toggleWrapperIDsFor[option.identify()];var partitioned=this.toggleWrapperIDs.partition(function(id){return wrapperIDs.include(id)});Toggle.show(partitioned[0],this.effect);Toggle.hide(partitioned[1],this.effect);}});